// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Kullanıcı Yönetimi
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  orders    Order[]
  customers Customer[]
  products  Product[]
  stockMovements StockMovement[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

// Müşteri Yönetimi (CRM)
model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  company     String?
  taxNumber   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  createdByUser User   @relation(fields: [createdBy], references: [id])

  // İlişkiler
  orders      Order[]

  @@map("customers")
}

// Ürün Kategorileri
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // İlişkiler
  products    Product[]

  @@map("categories")
}

// Ürün Yönetimi (Inventory)
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  sku         String   @unique
  price       Float
  cost        Float
  stock       Int      @default(0)
  minStock    Int      @default(0)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  createdByUser User   @relation(fields: [createdBy], references: [id])

  // İlişkiler
  orderItems  OrderItem[]
  stockMovements StockMovement[]

  @@map("products")
}

// Stok Hareketleri
model StockMovement {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
  type          StockMovementType
  quantity      Int
  previousStock Int
  newStock      Int
  reason        String
  reference     String?
  createdBy     String
  createdByUser User     @relation(fields: [createdBy], references: [id])
  createdAt     DateTime @default(now())

  @@map("stock_movements")
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
}

// Sipariş Yönetimi
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  customerId  String
  customer    Customer    @relation(fields: [customerId], references: [id])
  status      OrderStatus @default(PENDING)
  totalAmount Float
  taxAmount   Float       @default(0)
  discount    Float       @default(0)
  notes       String?
  orderDate   DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String
  createdByUser User      @relation(fields: [createdBy], references: [id])

  // İlişkiler
  items       OrderItem[]
  payments    Payment[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  total     Float

  @@map("order_items")
}

// Finansal Yönetim
model Payment {
  id          String        @id @default(cuid())
  orderId     String
  order       Order         @relation(fields: [orderId], references: [id])
  amount      Float
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  reference   String?
  paymentDate DateTime      @default(now())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("payments")
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  CHECK
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
