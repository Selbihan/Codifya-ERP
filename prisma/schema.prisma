// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// Müşteri Yönetimi (CRM)
model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  company     String?
  taxNumber   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int
  createdByUser User   @relation(fields: [createdBy], references: [id])

  // İlişkiler
  orders      Order[]
  invoices    Invoice[]
  // TODO(CRM Split): Bu 'Customer' modeli ileride Account & Contact ayrışması sonrası kaldırılabilir
  // veya yalnızca legacy / basit müşteri kayıtları için tutulabilir. Yeni CRM modelleri (Lead, Contact, Account)
  // eklendi; geçiş stratejisi: 1) Yeni kayıtlarda Account/Contact kullan 2) Raporlar her iki kaynağı birleştirsin
  // 3) Son aşamada Customer soft-deprecate.

  @@map("customers")
}

// Ürün Kategorileri
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // İlişkiler
  products    Product[]

  @@map("categories")
}

// Ürün Yönetimi (Inventory)
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  sku         String   @unique
  price       Float      // TODO(Money->Decimal): Decimal(18,2)'ye migrasyon planı
  cost        Float      // TODO(Money->Decimal): Decimal(18,2)'ye migrasyon planı
  stock       Int      @default(0)
  minStock    Int      @default(0)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int
  createdByUser User   @relation(fields: [createdBy], references: [id])

  // İlişkiler
  orderItems  OrderItem[]
  stockMovements StockMovement[]
  invoiceLines   InvoiceLine[] // Fatura satırları (opsiyonel ürün referansı)

  @@map("products")
}

// Stok Hareketleri
model StockMovement {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
  type          StockMovementType
  quantity      Int
  previousStock Int
  newStock      Int
  reason        String
  reference     String?
  createdBy     Int
  createdByUser User     @relation(fields: [createdBy], references: [id])
  createdAt     DateTime @default(now())

  @@map("stock_movements")
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
}

// Sipariş Yönetimi
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  customerId  String
  customer    Customer    @relation(fields: [customerId], references: [id])
  status      OrderStatus @default(PENDING)
  totalAmount Float       // TODO(Money->Decimal)
  taxAmount   Float       @default(0) // TODO(Money->Decimal)
  discount    Float       @default(0) // TODO(Money->Decimal)
  notes       String?
  orderDate   DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   Int
  createdByUser User      @relation(fields: [createdBy], references: [id])

  // TODO(Currency): Aşağıdaki alanlar migration öncesi yorumda bırakıldı
  // currency     String    @default("TRY")
  // exchangeRate Decimal?  @db.Decimal(18,6) // Base TRY kabulü ile

  // İlişkiler
  items       OrderItem[]
  payments    Payment[]
  invoices    Invoice[]
  transactions Transaction[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  // PARTIALLY_PAID // TODO(Status): Ödeme dağılımı eklendiğinde açılacak
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float    // TODO(Money->Decimal)
  total     Float    // TODO(Money->Decimal - derived)

  @@map("order_items")
}

// Finansal Yönetim
model Payment {
  id          String        @id @default(cuid())
  orderId     String
  order       Order         @relation(fields: [orderId], references: [id])
  amount      Float         // TODO(Money->Decimal)
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  reference   String?
  paymentDate DateTime      @default(now())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // İlişkiler
  transactions Transaction[]
  allocations  PaymentAllocation[] // Ödemenin tahsis edildiği faturalar

  @@map("payments")
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  CHECK
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Muhasebe Yönetimi
model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  orderId       String?
  order         Order?        @relation(fields: [orderId], references: [id])
  customerId    String?
  customer      Customer?     @relation(fields: [customerId], references: [id])
  type          InvoiceType
  status        InvoiceStatus @default(DRAFT)
  subtotal      Float         // TODO(Money->Decimal)
  taxAmount     Float         @default(0) // TODO(Money->Decimal)
  discount      Float         @default(0) // TODO(Money->Decimal)
  totalAmount   Float         // TODO(Money->Decimal)
  dueDate       DateTime
  issueDate     DateTime      @default(now())
  paidDate      DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     Int
  createdByUser User          @relation(fields: [createdBy], references: [id])

  // TODO(Currency): currency & exchangeRate ileride eklenecek
  // currency     String    @default("TRY")
  // exchangeRate Decimal?  @db.Decimal(18,6)

  // İlişkiler
  transactions  Transaction[]
  invoiceLines  InvoiceLine[]
  allocations   PaymentAllocation[] // Faturaya yapılan ödeme tahsisleri

  @@map("invoices")
}

enum InvoiceType {
  SALES
  PURCHASE
  EXPENSE
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  CANCELLED
  // PARTIALLY_PAID // TODO(Status): Ödeme tahsisleri sonrası
}

model InvoiceLine {
  id           String     @id @default(cuid())
  invoiceId    String
  invoice      Invoice    @relation(fields: [invoiceId], references: [id])
  
  productId    String?    
  product      Product?   @relation(fields: [productId], references: [id])

  description  String     @db.Text
  quantity     Decimal    @db.Decimal(18, 2)
  unitPrice    Decimal    @db.Decimal(18, 2)
  discount     Decimal?   @db.Decimal(18, 2)
  taxRate      Decimal?   @db.Decimal(5, 2)      // % olarak örn: 18.00
  taxAmount    Decimal    @db.Decimal(18, 2)
  lineTotal    Decimal    @db.Decimal(18, 2)      // (unitPrice * quantity - discount + taxAmount)

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}



model Transaction {
  id            String              @id @default(cuid())
  type          TransactionType
  category      TransactionCategory
  amount        Float        // TODO(Money->Decimal)
  description   String
  reference     String?
  date          DateTime            @default(now())
  invoiceId     String?
  orderId       String?
  paymentId     String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  createdBy     Int
  createdByUser User                @relation(fields: [createdBy], references: [id])
  invoice       Invoice?            @relation(fields: [invoiceId], references: [id])
  order         Order?              @relation(fields: [orderId], references: [id])
  payment       Payment?            @relation(fields: [paymentId], references: [id])

  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionCategory {
  SALES
  PURCHASE
  SALARY
  RENT
  UTILITIES
  MARKETING
  OTHER
}

model User {
  email                                              String             @unique
  password                                           String
  name                                               String
  username                                           String             @unique
  role                                               UserRole           @default(USER)
  isActive                                           Boolean            @default(true)
  createdAt                                          DateTime           @default(now())
  updatedAt                                          DateTime           @updatedAt
  code                                               String             @unique
  createDate                                         DateTime           @default(now())
  createdBy                                          Int?
  deletedAt                                          DateTime?
  deletedBy                                          Int?
  department                                         String?
  language                                           String?
  updateDate                                         DateTime?
  updatedBy                                          Int?
  id                                                 Int                @id @default(autoincrement())
  FinancialAccount_FinancialAccount_createdByTousers FinancialAccount[] @relation("FinancialAccount_createdByTousers")
  FinancialAccount_FinancialAccount_deletedByTousers FinancialAccount[] @relation("FinancialAccount_deletedByTousers")
  FinancialAccount_FinancialAccount_updatedByTousers FinancialAccount[] @relation("FinancialAccount_updatedByTousers")
  customers                                          Customer[]
  invoices                                           Invoice[]
  orders                                             Order[]
  products                                           Product[]
  stockMovements                                     StockMovement[]
  transactions                                       Transaction[]
  leads                                              Lead[]
  contacts                                           Contact[]
  accounts                                           Account[]
  activities                                         Activity[]
  createdByUser                                      User?              @relation("UserCreatedBy", fields: [createdBy], references: [id])
  createdUsers                                       User[]             @relation("UserCreatedBy")
  deletedByUser                                      User?              @relation("UserDeletedBy", fields: [deletedBy], references: [id])
  deletedUsers                                       User[]             @relation("UserDeletedBy")
  updatedByUser                                      User?              @relation("UserUpdatedBy", fields: [updatedBy], references: [id])
  updatedUsers                                       User[]             @relation("UserUpdatedBy")

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}



model FinancialAccount {
  id                                      Int       @id @default(autoincrement())
  description                             String
  address                                 String
  country                                 String
  city                                    String
  district                                String
  taxOffice                               String
  taxNo                                   String?
  taxPayerType                            Boolean
  idNo                                    String?
  area                                    String
  isActive                                Boolean   @default(true)
  generalTel                              String?
  generalEmail                            String?
  generalName                             String
  generalLastName                         String?
  generalWebsite                          String?
  createdAt                               DateTime  @default(now())
  updatedAt                               DateTime  @updatedAt
  code                                    String
  createdBy                               Int
  deletedAt                               DateTime?
  deletedBy                               Int?
  updatedBy                               Int?
  users_FinancialAccount_createdByTousers User      @relation("FinancialAccount_createdByTousers", fields: [createdBy], references: [id])
  users_FinancialAccount_deletedByTousers User?     @relation("FinancialAccount_deletedByTousers", fields: [deletedBy], references: [id])
  users_FinancialAccount_updatedByTousers User?     @relation("FinancialAccount_updatedByTousers", fields: [updatedBy], references: [id])

  @@map("FinancialAccount")
}

model Lead {
  id                  String       @id @default(cuid())
  name                String
  email               String?      @db.Text
  phone               String?      @db.Text
  source              LeadSource
  status              LeadStatus   @default(NEW)
  
  // User.id Int olduğundan ownerUserId Int olmalı
  ownerUserId         Int
  ownerUser           User         @relation(fields: [ownerUserId], references: [id])

  convertedContactId  String? @unique
  convertedContact    Contact?     @relation("LeadToContact", fields: [convertedContactId], references: [id])

  convertedAt         DateTime?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  @@index([status], map: "idx_lead_status")
  @@index([ownerUserId], map: "idx_lead_owner")
  
  // Silindi: duplicate index. Lead modelinde zaten eklendi.
}

enum LeadSource {
  WEB
  EVENT
  REFERRAL
  OTHER
}

enum LeadStatus {
  NEW
  QUALIFIED
  DISQUALIFIED
}

model Contact {
  id           String    @id @default(cuid())
  firstName    String
  lastName     String
  email        String
  phone        String?   @db.Text
  accountId    String?   // Opsiyonel, ilişki olursa bağlanır
  account      Account?  @relation(fields: [accountId], references: [id])
  
  // User.id Int → ownerUserId Int
  ownerUserId  Int
  ownerUser    User      @relation(fields: [ownerUserId], references: [id])
  convertedFromLead Lead? @relation("LeadToContact")
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Account {
  id           String    @id @default(cuid())
  name         String                 // Şirket / müşteri adı (zorunlu)
  vatNumber    String?                // Vergi numarası (opsiyonel)
  industry     String?                // Sektör bilgisi (opsiyonel)
  size         AccountSize?           // Şirket büyüklüğü enum
  website      String?                // Web sitesi (opsiyonel)
  
  // User.id Int → ownerUserId Int
  ownerUserId  Int                 // Sahip kullanıcı ID
  ownerUser    User      @relation(fields: [ownerUserId], references: [id])
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  contacts     Contact[]               // Bu hesaba bağlı kişiler
}

enum AccountSize {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  subject      String
  description  String?     @db.Text
  dueAt        DateTime?   
  completedAt  DateTime?   

  entityType   EntityType
  entityId     String       // Polymorphic ilişkide diğer tabloların id'si (Lead, Contact, Account, Order, Opportunity)

  // User.id Int → ownerUserId Int
  ownerUserId  Int
  ownerUser    User         @relation(fields: [ownerUserId], references: [id])

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([entityType, entityId]) // Timeline sorguları için
  @@index([ownerUserId])
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  TASK
  NOTE
}

enum EntityType {
  LEAD
  CONTACT
  ACCOUNT
  ORDER
  OPPORTUNITY
}

model PaymentAllocation {
  id          String    @id @default(cuid())
  paymentId   String
  payment     Payment   @relation(fields: [paymentId], references: [id])

  invoiceId   String
  invoice     Invoice   @relation(fields: [invoiceId], references: [id])

  amount      Decimal   @db.Decimal(18, 2)     // Bu ödeme tahsis edilen miktar
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// ---- İLİŞKİ GERİ BAĞLANTILARI & TODO'lar ----
// Payment ve Invoice modellerine tahsis ilişkilerinin eklenmesi
// NOT: Financial tutarlar şu an Float; ileride Decimal'e migrasyon planlanmalı (bkz: InvoiceLine & PaymentAllocation Decimal kullanıyor)

