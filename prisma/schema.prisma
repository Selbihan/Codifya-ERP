// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// Müşteri Yönetimi (CRM)
model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  company     String?
  taxNumber   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int
  createdByUser User   @relation(fields: [createdBy], references: [id])

  // İlişkiler
  orders      Order[]
  invoices    Invoice[]

  @@map("customers")
}

// Ürün Kategorileri
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // İlişkiler
  products    Product[]

  @@map("categories")
}

// Ürün Yönetimi (Inventory)
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  sku         String   @unique
  price       Float
  cost        Float
  stock       Int      @default(0)
  minStock    Int      @default(0)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int
  createdByUser User   @relation(fields: [createdBy], references: [id])

  // İlişkiler
  orderItems  OrderItem[]
  stockMovements StockMovement[]

  @@map("products")
}

// Stok Hareketleri
model StockMovement {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
  type          StockMovementType
  quantity      Int
  previousStock Int
  newStock      Int
  reason        String
  reference     String?
  createdBy     Int
  createdByUser User     @relation(fields: [createdBy], references: [id])
  createdAt     DateTime @default(now())

  @@map("stock_movements")
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
}

// Sipariş Yönetimi
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  customerId  String
  customer    Customer    @relation(fields: [customerId], references: [id])
  status      OrderStatus @default(PENDING)
  totalAmount Float
  taxAmount   Float       @default(0)
  discount    Float       @default(0)
  notes       String?
  orderDate   DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   Int
  createdByUser User      @relation(fields: [createdBy], references: [id])

  // İlişkiler
  items       OrderItem[]
  payments    Payment[]
  invoices    Invoice[]
  transactions Transaction[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  total     Float

  @@map("order_items")
}

// Finansal Yönetim
model Payment {
  id          String        @id @default(cuid())
  orderId     String
  order       Order         @relation(fields: [orderId], references: [id])
  amount      Float
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  reference   String?
  paymentDate DateTime      @default(now())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // İlişkiler
  transactions Transaction[]

  @@map("payments")
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  CHECK
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Muhasebe Yönetimi
model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  orderId       String?
  order         Order?        @relation(fields: [orderId], references: [id])
  customerId    String?
  customer      Customer?     @relation(fields: [customerId], references: [id])
  type          InvoiceType
  status        InvoiceStatus @default(DRAFT)
  subtotal      Float
  taxAmount     Float         @default(0)
  discount      Float         @default(0)
  totalAmount   Float
  dueDate       DateTime
  issueDate     DateTime      @default(now())
  paidDate      DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     Int
  createdByUser User          @relation(fields: [createdBy], references: [id])

  // İlişkiler
  transactions  Transaction[]

  @@map("invoices")
}

enum InvoiceType {
  SALES
  PURCHASE
  EXPENSE
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  CANCELLED
}

model Transaction {
  id            String              @id @default(cuid())
  type          TransactionType
  category      TransactionCategory
  amount        Float
  description   String
  reference     String?
  date          DateTime            @default(now())
  invoiceId     String?
  orderId       String?
  paymentId     String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  createdBy     Int
  createdByUser User                @relation(fields: [createdBy], references: [id])
  invoice       Invoice?            @relation(fields: [invoiceId], references: [id])
  order         Order?              @relation(fields: [orderId], references: [id])
  payment       Payment?            @relation(fields: [paymentId], references: [id])

  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionCategory {
  SALES
  PURCHASE
  SALARY
  RENT
  UTILITIES
  MARKETING
  OTHER
}

model User {
  email                                              String             @unique
  password                                           String
  name                                               String
  username                                           String             @unique
  role                                               UserRole           @default(USER)
  isActive                                           Boolean            @default(true)
  createdAt                                          DateTime           @default(now())
  updatedAt                                          DateTime           @updatedAt
  code                                               String             @unique
  createDate                                         DateTime           @default(now())
  createdBy                                          Int?
  deletedAt                                          DateTime?
  deletedBy                                          Int?
  department                                         String?
  language                                           String?
  updateDate                                         DateTime?
  updatedBy                                          Int?
  id                                                 Int                @id @default(autoincrement())
  FinancialAccount_FinancialAccount_createdByTousers FinancialAccount[] @relation("FinancialAccount_createdByTousers")
  FinancialAccount_FinancialAccount_deletedByTousers FinancialAccount[] @relation("FinancialAccount_deletedByTousers")
  FinancialAccount_FinancialAccount_updatedByTousers FinancialAccount[] @relation("FinancialAccount_updatedByTousers")
  customers                                          Customer[]
  invoices                                           Invoice[]
  orders                                             Order[]
  products                                           Product[]
  stockMovements                                     StockMovement[]
  transactions                                       Transaction[]
  createdByUser                                      User?              @relation("UserCreatedBy", fields: [createdBy], references: [id])
  createdUsers                                       User[]             @relation("UserCreatedBy")
  deletedByUser                                      User?              @relation("UserDeletedBy", fields: [deletedBy], references: [id])
  deletedUsers                                       User[]             @relation("UserDeletedBy")
  updatedByUser                                      User?              @relation("UserUpdatedBy", fields: [updatedBy], references: [id])
  updatedUsers                                       User[]             @relation("UserUpdatedBy")

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}



model FinancialAccount {
  id                                      Int       @id @default(autoincrement())
  description                             String
  address                                 String
  country                                 String
  city                                    String
  district                                String
  taxOffice                               String
  taxNo                                   String?
  taxPayerType                            Boolean
  idNo                                    String?
  area                                    String
  isActive                                Boolean   @default(true)
  generalTel                              String?
  generalEmail                            String?
  generalName                             String
  generalLastName                         String?
  generalWebsite                          String?
  createdAt                               DateTime  @default(now())
  updatedAt                               DateTime  @updatedAt
  code                                    String
  createdBy                               Int
  deletedAt                               DateTime?
  deletedBy                               Int?
  updatedBy                               Int?
  users_FinancialAccount_createdByTousers User      @relation("FinancialAccount_createdByTousers", fields: [createdBy], references: [id])
  users_FinancialAccount_deletedByTousers User?     @relation("FinancialAccount_deletedByTousers", fields: [deletedBy], references: [id])
  users_FinancialAccount_updatedByTousers User?     @relation("FinancialAccount_updatedByTousers", fields: [updatedBy], references: [id])

  @@map("FinancialAccount")
}

